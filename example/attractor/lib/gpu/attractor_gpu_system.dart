// This file is located at `lib/gpu/attractor_gpu_system.dart`

import 'dart:math';
import 'dart:typed_data';
import 'package:nexus/nexus.dart';
import '../events.dart';

// This `part` directive links this file to the code generated by build_runner.
part 'attractor_gpu_system.g.dart';

// Data structures remain the same.
class ParticleData {
  final Vec2 position;
  final Vec2 velocity;
  double age;
  final double maxAge;
  final double initialSize;
  double seed;

  ParticleData({
    required this.position,
    required this.velocity,
    this.age = 0.0,
    required this.maxAge,
    required this.initialSize,
    this.seed = 0.0,
  });
}

class Vec2 with EquatableMixin {
  double x, y;
  Vec2(this.x, this.y);
  @override
  List<Object?> get props => [x, y];
}

class SimParams {
    final double deltaTime;
    final double attractorX;
    final double attractorY;
    final double attractorStrength;
    
    SimParams({
      required this.deltaTime,
      required this.attractorX,
      required this.attractorY,
      required this.attractorStrength
    });
}

class AttractorGpuSystem extends GpuSystem<ParticleData> {
  final int particleCount;
  final Random _random = Random();
  late List<ParticleData> _particleObjects;

  // 1. The user writes their logic in pure, valid Dart.
  void gpuLogic(ParticleData p, SimParams params) {
    if (p.age >= p.maxAge) {
      p.position.x = params.attractorX;
      p.position.y = params.attractorY;

      final seed = p.seed + (params.deltaTime * 1000.0);
      final angle = (sin(seed) * 43758.5453).abs() % (2 * pi);
      final speed = 50.0 + (sin(seed * 2.0) * 43758.5453).abs() % 100.0;
      p.velocity.x = cos(angle) * speed;
      p.velocity.y = sin(angle) * speed;
      p.age = 0.0;
      p.seed += 1.0;
    }

    final dirX = params.attractorX - p.position.x;
    final dirY = params.attractorY - p.position.y;
    final distSq = (dirX * dirX) + (dirY * dirY);

    if (distSq > 1.0) {
      final dist = sqrt(distSq);
      final force = params.attractorStrength * 1000.0 / distSq;
      p.velocity.x += (dirX / dist) * force * params.deltaTime;
      p.velocity.y += (dirY / dist) * force * params.deltaTime;
    }

    p.velocity.x *= (1.0 - (0.1 * params.deltaTime));
    p.velocity.y *= (1.0 - (0.1 * params.deltaTime));

    p.position.x += p.velocity.x * params.deltaTime;
    p.position.y += p.velocity.y * params.deltaTime;
    p.age += params.deltaTime;
  }

  // 2. The `wgslSourceCode` is provided by the generated part file.
  // --- CRITICAL FIX: Correct variable name ---
  // The correct syntax is `_$ClassNameWgsl`, not `_\$`.
  // --- اصلاح حیاتی: نام صحیح متغیر ---
  // سینتکس صحیح `_$ClassNameWgsl` است، نه `_\$`.
  @override
  String get wgslSourceCode => _\$AttractorGpuSystemWgsl;
  
  // --- System Implementation Details ---
  AttractorGpuSystem({this.particleCount = 500});

  @override
  void onAddedToWorld(NexusWorld world) {
    super.onAddedToWorld(world);
    listen<ResetSimulationEvent>((_) => reinitializeData());
  }

  @override
  List<ParticleData> initializeData() {
    _particleObjects = List.generate(particleCount, (i) {
      final screenInfo = world.rootEntity.get<ScreenInfoComponent>();
      final w = screenInfo?.width ?? 400;
      final h = screenInfo?.height ?? 800;
      return _createParticle(w / 2, h * 0.8);
    });
    return _particleObjects;
  }

  ParticleData _createParticle(double x, double y) {
    final angle = _random.nextDouble() * 2 * pi;
    final speed = _random.nextDouble() * 150 + 50;
    return ParticleData(
      position: Vec2(x, y),
      velocity: Vec2(cos(angle) * speed, sin(angle) * speed),
      age: 0.0,
      maxAge: _random.nextDouble() * 3 + 2,
      initialSize: _random.nextDouble() * 2.0 + 1.0,
      seed: _random.nextDouble() * 1000.0,
    );
  }

  @override
  Float32List flattenData(List<ParticleData> data) {
    if (data.isEmpty) return Float32List(0);
    final list = Float32List(data.length * 8);
    for (int i = 0; i < data.length; i++) {
      final p = data[i];
      final baseIndex = i * 8;
      list[baseIndex + 0] = p.position.x;
      list[baseIndex + 1] = p.position.y;
      list[baseIndex + 2] = p.velocity.x;
      list[baseIndex + 3] = p.velocity.y;
      list[baseIndex + 4] = p.age;
      list[baseIndex + 5] = p.maxAge;
      list[baseIndex + 6] = p.initialSize;
      list[baseIndex + 7] = p.seed;
    }
    return list;
  }
}
