// Generated by the Nexus transpiler. DO NOT EDIT.
part of 'attractor_gpu_system.dart';

const String _\$AttractorGpuSystemWgsl = r'''
struct Particle {
    pos: vec2<f32>,
    vel: vec2<f32>,
    age: f32,
    max_age: f32,
    initial_size: f32,
    seed: f32,
};

struct SimParams {
    delta_time: f32,
    attractor_x: f32,
    attractor_y: f32,
    attractor_strength: f32,
};

@group(0) @binding(1)
var<uniform> params: SimParams;

@group(0) @binding(0)
var<storage, read_write> particles: array<Particle>;

fn hash(n: f32) -> f32 {
    return fract(sin(n) * 43758.5453123);
}

@compute @workgroup_size(256)
fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let index = global_id.x;
    if (index >= arrayLength(&particles)) { return; }
    var p = particles[index];

    // Transpiled user logic starts here
    if ((p.age >= p.max_age)) {
        p.pos.x = params.attractor_x;
        p.pos.y = params.attractor_y;
        var seed = (p.seed + (params.delta_time * 1000.0));
        var angle = (hash(seed) * 6.28318);
        var speed = (50.0 + (hash((seed * 2.0)) * 100.0));
        p.vel.x = (cos(angle) * speed);
        p.vel.y = (sin(angle) * speed);
        p.age = 0.0;
        p.seed = (p.seed + 1.0);
    }
    var dirX = (params.attractor_x - p.pos.x);
    var dirY = (params.attractor_y - p.pos.y);
    var distSq = ((dirX * dirX) + (dirY * dirY));
    if ((distSq > 1.0)) {
        var dist = sqrt(distSq);
        var force = ((params.attractor_strength * 1000.0) / distSq);
        p.vel.x = (p.vel.x + ((dirX / dist) * force * params.delta_time));
        p.vel.y = (p.vel.y + ((dirY / dist) * force * params.delta_time));
    }
    p.vel.x = (p.vel.x * (1.0 - (0.1 * params.delta_time)));
    p.vel.y = (p.vel.y * (1.0 - (0.1 * params.delta_time)));
    p.pos.x = (p.pos.x + (p.vel.x * params.delta_time));
    p.pos.y = (p.pos.y + (p.vel.y * params.delta_time));
    p.age = (p.age + params.delta_time);
    // Transpiled user logic ends here

    particles[index] = p;
}
''';
